# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Rust
on:
  push:
    branches: [main]
    # Also run on tag pushes, as the release.yml doesn't currently run tests
    tags: ["v*"]
  pull_request:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - "README.md"
env:
  CARGO_TERM_COLOR: always
jobs:
  lint-rust:
    name: Lint Rust
    runs-on: "ubuntu-latest"
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.66
          default: true
          components: clippy, rustfmt

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "${{ runner.os }}-lint-${{ hashFiles('./Cargo.lock') }}"

      - name: Cargo Format
        run:
          BUILD_SPIN_EXAMPLES=0 cargo fmt --all -- --check

      - name: Cargo Clippy
        run:
          BUILD_SPIN_EXAMPLES=0 cargo clippy --workspace --all-targets --all-features -- -D warnings

  build-rust:
    name: Build Spin
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
              os: "ubuntu-latest",
              extension: "",
              # We have this enabled for releases, so we should test it.
              extraArgs: "--features openssl/vendored",
            }
          - {
              os: "macos-latest",
              extension: "",
              extraArgs: "",
            }
          - {
              os: "windows-latest",
              extension: ".exe",
              extraArgs: "",
            }
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.66
          default: true

      - name: "Install Wasm Rust target"
        run: rustup target add wasm32-wasi

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "${{ runner.os }}-full-${{ hashFiles('./Cargo.lock') }}"

      - name: Cargo Build
        run: cargo build --workspace --release --all-targets --all-features ${{ matrix.config.extraArgs }}

      - name: "Archive executable artifact"
        uses: actions/upload-artifact@v3
        with:
          name: spin-${{ matrix.config.os }}
          path: target/release/spin${{ matrix.config.extension }}


  test-rust:
    name: Test Spin SDK - Rust
    runs-on: ${{ matrix.config.os }}
    needs: build-rust
    strategy:
      matrix:
        config:
          - {
              os: "ubuntu-latest",
              extension: "",
              # We have this enabled for releases, so we should test it.
              extraArgs: "--features openssl/vendored",
              bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-linux-amd64.tar.gz",
              bindleBinary: "bindle-server",
              pathInBindleArchive: "bindle-server",
              nomadUrl: "https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_linux_amd64.zip",
              nomadBinary: "nomad",
              pathInNomadArchive: "nomad",
              hippoUrl: "https://github.com/deislabs/hippo/releases/download/v0.19.0/hippo-server-linux-x64.tar.gz",
              wasmtimeUrl: "https://github.com/bytecodealliance/wasmtime/releases/download/v0.36.0/wasmtime-v0.36.0-x86_64-linux.tar.xz",
              wasmtimeBinary: "wasmtime",
              pathInWasmtimeArchive: "wasmtime-v0.36.0-x86_64-linux/wasmtime",
              platformAgnosticChecks: true,
            }
          - {
              os: "macos-latest",
              extension: "",
              extraArgs: "",
              bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-macos-amd64.tar.gz",
              bindleBinary: "bindle-server",
              pathInBindleArchive: "bindle-server",
              nomadUrl: "https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_darwin_amd64.zip",
              nomadBinary: "nomad",
              pathInNomadArchive: "nomad",
              hippoUrl: "https://github.com/deislabs/hippo/releases/download/v0.19.0/hippo-server-osx-x64.tar.gz",
            }
          - {
              os: "windows-latest",
              extension: ".exe",
              extraArgs: "",
              bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-windows-amd64.tar.gz",
              bindleBinary: "bindle-server.exe",
              pathInBindleArchive: "bindle-server.exe",
              nomadUrl: "https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_windows_amd64.zip",
              nomadBinary: "nomad.exe",
              pathInNomadArchive: "nomad.exe",
              hippoUrl: "https://github.com/deislabs/hippo/releases/download/v0.19.0/hippo-server-win-x64.zip",
            }
    steps:
      - uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: 1.66
          default: true

      - name: "Install Wasm Rust target"
        run: rustup target add wasm32-wasi

      - name: Install bindle
        uses: engineerd/configurator@v0.0.9
        with:
          name: ${{ matrix.config.bindleBinary }}
          url: ${{ matrix.config.bindleUrl }}
          pathInArchive: ${{ matrix.config.pathInBindleArchive }}

      - name: Install nomad
        uses: engineerd/configurator@v0.0.9
        with:
          name: ${{ matrix.config.nomadBinary }}
          url: ${{ matrix.config.nomadUrl }}
          pathInArchive: ${{ matrix.config.pathInNomadArchive }}

      - name: Install hippo
        if: ${{ fromJSON(matrix.config.os != 'windows-latest') }}
        run: |
          curl -L ${{ matrix.config.hippoUrl }} -o hippo-server.tar.gz
          mkdir hippo-server-output
          tar xz -C hippo-server-output -f hippo-server.tar.gz
          cp -r hippo-server-output/**/* ~/configurator/bin
          chmod +x ~/configurator/bin/Hippo.Web

      - name: Install hippo on Windows
        if: ${{ fromJSON(matrix.config.os == 'windows-latest') }}
        run: |
          (New-Object System.Net.WebClient).DownloadFile("${{ matrix.config.hippoUrl }}","hippo-server.zip");
          md hippo-server-output;
          Expand-Archive .\hippo-server.zip .\hippo-server-output;
          echo "$((Get-Item .\hippo-server-output).FullName)\win-x64";
          echo "$((Get-Item .\hippo-server-output).FullName)\win-x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append;

      - uses: Swatinem/rust-cache@v2
        with:
          shared-key: "${{ runner.os }}-full-${{ hashFiles('./Cargo.lock') }}"

      - name: Cargo Unit Tests
        run: |
          make test-unit

      - name: Cargo E2E Tests
        run: |
          make test-e2e
        env:
          RUST_LOG: spin=trace

  test-go:
    name: Test Spin SDK - Go
    runs-on: ${{ matrix.config.os }}
    needs: build-rust
    strategy:
      matrix:
        config:
          - {
              os: "ubuntu-latest",
              bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-linux-amd64.tar.gz",
              bindleBinary: "bindle-server",
              pathInBindleArchive: "bindle-server",
              wasmtimeUrl: "https://github.com/bytecodealliance/wasmtime/releases/download/v0.36.0/wasmtime-v0.36.0-x86_64-linux.tar.xz",
              wasmtimeBinary: "wasmtime",
              pathInWasmtimeArchive: "wasmtime-v0.36.0-x86_64-linux/wasmtime",
            }
    steps:
      - uses: actions/checkout@v3

      - name: Retrieve saved Spin Binary
        uses: actions/download-artifact@v3
        with:
          name: spin-ubuntu-latest
          path: target/debug/

      - name: Fix Spin Binary permissions
        run: |
          ls -lah target/
          ls -lah target/debug
          chmod +x target/debug/spin

      - name: Install bindle
        uses: engineerd/configurator@v0.0.9
        with:
          name: ${{ matrix.config.bindleBinary }}
          url: ${{ matrix.config.bindleUrl }}
          pathInArchive: ${{ matrix.config.pathInBindleArchive }}

      - name: "Install Go"
        uses: actions/setup-go@v3
        with:
          go-version: '1.17'

      - name: "Install TinyGo"
        run: |
          wget https://github.com/tinygo-org/tinygo/releases/download/v0.22.0/tinygo_0.22.0_amd64.deb
          sudo dpkg -i tinygo_0.22.0_amd64.deb
          tinygo env

      - name: "Install Wasmtime"
        uses: engineerd/configurator@v0.0.9
        with:
          name: ${{ matrix.config.wasmtimeBinary }}
          url: ${{ matrix.config.wasmtimeUrl }}
          pathInArchive: ${{ matrix.config.pathInWasmtimeArchive }}

      - name: "Test Go SDK"
        run: make test-sdk-go

  e2e-tests:
    runs-on: ubuntu-22.04
    needs: build-rust
    concurrency:
      group: e2e-tests
    steps:
      - uses: actions/checkout@v3

      - name: Retrieve saved Spin Binary
        uses: actions/download-artifact@v3
        with:
          name: spin-ubuntu-latest
          path: target/release/

      - name: Build e2e tests image
        run: |
          docker build -t spin-e2e-tests -f e2e-tests.Dockerfile .
      - name: Run e2e tests
        run: |
          chmod +x `pwd`/target/release/spin
          docker compose -f e2e-tests-docker-compose.yml run e2e-tests

  cargo-vet:
    name: Vet Dependencies
    runs-on: ubuntu-latest
    env:
      CARGO_VET_VERSION: 0.3.1
    steps:
      - uses: actions/checkout@v3
      - name: Install Rust
        run: rustup update stable && rustup default stable
      - uses: actions/cache@v3
        with:
          path: ${{ runner.tool_cache }}/cargo-vet
          key: cargo-vet-bin-${{ env.CARGO_VET_VERSION }}
      - name: Add the tool cache directory to the search path
        run: echo "${{ runner.tool_cache }}/cargo-vet/bin" >> $GITHUB_PATH
      - name: Ensure that the tool cache is populated with the cargo-vet binary
        run: cargo install --root ${{ runner.tool_cache }}/cargo-vet --version ${{ env.CARGO_VET_VERSION }} cargo-vet
      - name: Invoke cargo-vet
        run: cargo vet --locked