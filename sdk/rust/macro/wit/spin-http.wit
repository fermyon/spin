// The entrypoint for an HTTP handler.
handle-http-request: func(req: request) -> response

// This is a temporary workaround very similar to https://github.com/deislabs/wasi-experimental-http.
// Once asynchronous functions, streams, and the upstream HTTP API are available, this should be removed.

// The HTTP status code.
// This is currently an unsigned 16-bit integer,
// but it could be represented as an enum containing
// all possible HTTP status codes.
type http-status = u16

// The HTTP body.
// Currently, this is a synchonous byte array, but it should be
// possible to have a stream for both request and response bodies.
type body = list<u8>

// The HTTP headers represented as a list of (name, value) pairs.
type headers = list<tuple<string, string>>

// The HTTP parameter queries, represented as a list of (name, value) pairs.
type params = list<tuple<string, string>>

// The HTTP URI of the current request.
type uri = string

// The HTTP method.
enum method {
    get,
    post,
    put,
    delete,
    patch,
    head,
    options,
}

// An HTTP request.
record request {
    method: method,
    uri: uri,
    headers: headers,
    params: params,
    client-addr: string,
    body: option<body>,
}

// An HTTP response.
record response {
    status: http-status,
    headers: option<headers>,
    body: option<body>,
}

// HTTP errors returned by the runtime.
enum http-error {
    success,
    destination-not-allowed,
    invalid-url,
    request-error,
    runtime-error,
    too-many-requests,
}
