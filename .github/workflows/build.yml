# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Rust
on:
  push:
    branches: [main]
    # Also run on tag pushes, as the release.yml doesn't currently run tests
    tags: ["v*"]
  pull_request:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - "README.md"
env:
  CARGO_TERM_COLOR: always
jobs:
  # lint-rust:
  #   name: Lint Rust
  #   runs-on: "ubuntu-latest"
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Install latest Rust stable toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         default: true
  #         components: clippy, rustfmt

  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         shared-key: "${{ runner.os }}-lint-${{ hashFiles('./Cargo.lock') }}"

  #     - name: Cargo Format
  #       run:
  #         BUILD_SPIN_EXAMPLES=0 cargo fmt --all -- --check

  #     - name: Cargo Clippy
  #       run:
  #         BUILD_SPIN_EXAMPLES=0 cargo clippy --workspace --all-targets --all-features -- -D warnings

  # build-rust:
  #   name: Build Spin
  #   runs-on: ${{ matrix.config.os }}
  #   strategy:
  #     matrix:
  #       config:
  #         - {
  #             os: "ubuntu-latest",
  #             extension: "",
  #             # We have this enabled for releases, so we should test it.
  #             extraArgs: "--features openssl/vendored",
  #           }
  #         - {
  #             os: "macos-latest",
  #             extension: "",
  #             extraArgs: "",
  #           }
  #         - {
  #             os: "windows-latest",
  #             extension: ".exe",
  #             extraArgs: "",
  #           }
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Install latest Rust stable toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         default: true

  #     - name: "Install Wasm Rust target"
  #       run: rustup target add wasm32-wasi

  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         shared-key: "${{ runner.os }}-full-${{ hashFiles('./Cargo.lock') }}"

  #     - name: Cargo Build
  #       run: cargo build --workspace --release --all-targets --all-features ${{ matrix.config.extraArgs }}

  #     - name: "Archive executable artifact"
  #       uses: actions/upload-artifact@v3
  #       with:
  #         name: spin-${{ matrix.config.os }}
  #         path: target/release/spin${{ matrix.config.extension }}


  # test-rust:
  #   name: Test Spin SDK - Rust
  #   runs-on: ${{ matrix.config.os }}
  #   needs: build-rust
  #   strategy:
  #     matrix:
  #       config:
  #         - {
  #             os: "ubuntu-latest",
  #             extension: "",
  #             # We have this enabled for releases, so we should test it.
  #             extraArgs: "--features openssl/vendored",
  #             bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-linux-amd64.tar.gz",
  #             bindleBinary: "bindle-server",
  #             pathInBindleArchive: "bindle-server",
  #             nomadUrl: "https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_linux_amd64.zip",
  #             nomadBinary: "nomad",
  #             pathInNomadArchive: "nomad",
  #             hippoUrl: "https://github.com/deislabs/hippo/releases/download/v0.19.0/hippo-server-linux-x64.tar.gz",
  #             wasmtimeUrl: "https://github.com/bytecodealliance/wasmtime/releases/download/v0.36.0/wasmtime-v0.36.0-x86_64-linux.tar.xz",
  #             wasmtimeBinary: "wasmtime",
  #             pathInWasmtimeArchive: "wasmtime-v0.36.0-x86_64-linux/wasmtime",
  #             platformAgnosticChecks: true,
  #           }
  #         - {
  #             os: "macos-latest",
  #             extension: "",
  #             extraArgs: "",
  #             bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-macos-amd64.tar.gz",
  #             bindleBinary: "bindle-server",
  #             pathInBindleArchive: "bindle-server",
  #             nomadUrl: "https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_darwin_amd64.zip",
  #             nomadBinary: "nomad",
  #             pathInNomadArchive: "nomad",
  #             hippoUrl: "https://github.com/deislabs/hippo/releases/download/v0.19.0/hippo-server-osx-x64.tar.gz",
  #           }
  #         - {
  #             os: "windows-latest",
  #             extension: ".exe",
  #             extraArgs: "",
  #             bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-windows-amd64.tar.gz",
  #             bindleBinary: "bindle-server.exe",
  #             pathInBindleArchive: "bindle-server.exe",
  #             nomadUrl: "https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_windows_amd64.zip",
  #             nomadBinary: "nomad.exe",
  #             pathInNomadArchive: "nomad.exe",
  #             hippoUrl: "https://github.com/deislabs/hippo/releases/download/v0.19.0/hippo-server-win-x64.zip",
  #           }
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Install latest Rust stable toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         default: true

  #     - name: "Install Wasm Rust target"
  #       run: rustup target add wasm32-wasi

  #     - name: Install bindle
  #       uses: engineerd/configurator@v0.0.8
  #       with:
  #         name: ${{ matrix.config.bindleBinary }}
  #         url: ${{ matrix.config.bindleUrl }}
  #         pathInArchive: ${{ matrix.config.pathInBindleArchive }}

  #     - name: Install nomad
  #       uses: engineerd/configurator@v0.0.8
  #       with:
  #         name: ${{ matrix.config.nomadBinary }}
  #         url: ${{ matrix.config.nomadUrl }}
  #         pathInArchive: ${{ matrix.config.pathInNomadArchive }}

  #     - name: Install hippo
  #       if: ${{ fromJSON(matrix.config.os != 'windows-latest') }}
  #       run: |
  #         curl -L ${{ matrix.config.hippoUrl }} -o hippo-server.tar.gz
  #         mkdir hippo-server-output
  #         tar xz -C hippo-server-output -f hippo-server.tar.gz
  #         cp -r hippo-server-output/**/* ~/configurator/bin
  #         chmod +x ~/configurator/bin/Hippo.Web

  #     - name: Install hippo on Windows
  #       if: ${{ fromJSON(matrix.config.os == 'windows-latest') }}
  #       run: |
  #         (New-Object System.Net.WebClient).DownloadFile("${{ matrix.config.hippoUrl }}","hippo-server.zip");
  #         md hippo-server-output;
  #         Expand-Archive .\hippo-server.zip .\hippo-server-output;
  #         echo "$((Get-Item .\hippo-server-output).FullName)\win-x64";
  #         echo "$((Get-Item .\hippo-server-output).FullName)\win-x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append;

  #     - uses: Swatinem/rust-cache@v2
  #       with:
  #         shared-key: "${{ runner.os }}-full-${{ hashFiles('./Cargo.lock') }}"

  #     - name: Cargo Unit Tests
  #       run: |
  #         make test-unit

  #     - name: Cargo E2E Tests
  #       run: |
  #         make test-e2e
  #       env:
  #         RUST_LOG: spin=trace

  # test-go:
  #   name: Test Spin SDK - Go
  #   runs-on: ${{ matrix.config.os }}
  #   needs: build-rust
  #   strategy:
  #     matrix:
  #       config:
  #         - {
  #             os: "ubuntu-latest",
  #             bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-linux-amd64.tar.gz",
  #             bindleBinary: "bindle-server",
  #             pathInBindleArchive: "bindle-server",
  #             wasmtimeUrl: "https://github.com/bytecodealliance/wasmtime/releases/download/v0.36.0/wasmtime-v0.36.0-x86_64-linux.tar.xz",
  #             wasmtimeBinary: "wasmtime",
  #             pathInWasmtimeArchive: "wasmtime-v0.36.0-x86_64-linux/wasmtime",
  #           }
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Retrieve saved Spin Binary
  #       uses: actions/download-artifact@v3
  #       with:
  #         name: spin-ubuntu-latest
  #         path: target/debug/

  #     - name: Fix Spin Binary permissions
  #       run: |
  #         ls -lah target/
  #         ls -lah target/debug
  #         chmod +x target/debug/spin

  #     - name: Install bindle
  #       uses: engineerd/configurator@v0.0.8
  #       with:
  #         name: ${{ matrix.config.bindleBinary }}
  #         url: ${{ matrix.config.bindleUrl }}
  #         pathInArchive: ${{ matrix.config.pathInBindleArchive }}

  #     - name: "Install Go"
  #       uses: actions/setup-go@v3
  #       with:
  #         go-version: '1.17'

  #     - name: "Install TinyGo"
  #       run: |
  #         wget https://github.com/tinygo-org/tinygo/releases/download/v0.22.0/tinygo_0.22.0_amd64.deb
  #         sudo dpkg -i tinygo_0.22.0_amd64.deb
  #         tinygo env

  #     - name: "Install Wasmtime"
  #       uses: engineerd/configurator@v0.0.8
  #       with:
  #         name: ${{ matrix.config.wasmtimeBinary }}
  #         url: ${{ matrix.config.wasmtimeUrl }}
  #         pathInArchive: ${{ matrix.config.pathInWasmtimeArchive }}

  #     - name: "Test Go SDK"
  #       run: make test-sdk-go

  # code-coverage:
  #   name: Run code coverage
  #   runs-on: ${{ matrix.config.os }}
  #   needs: build-rust
  #   strategy:
  #     matrix:
  #       config:
  #         - {
  #             os: "ubuntu-latest",
  #             extension: "",
  #             # We have this enabled for releases, so we should test it.
  #             extraArgs: "--features openssl/vendored",
  #             bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-linux-amd64.tar.gz",
  #             bindleBinary: "bindle-server",
  #             pathInBindleArchive: "bindle-server",
  #             nomadUrl: "https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_linux_amd64.zip",
  #             nomadBinary: "nomad",
  #             pathInNomadArchive: "nomad",
  #             hippoUrl: "https://github.com/deislabs/hippo/releases/download/v0.19.0/hippo-server-linux-x64.tar.gz",
  #           }
  #   steps:
  #     - uses: actions/checkout@v2

  #     - name: Install latest Rust stable toolchain
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable
  #         default: true

  #     - name: "Install Wasm Rust target"
  #       run: rustup target add wasm32-wasi

  #     - name: Install bindle
  #       uses: engineerd/configurator@v0.0.8
  #       with:
  #         name: ${{ matrix.config.bindleBinary }}
  #         url: ${{ matrix.config.bindleUrl }}
  #         pathInArchive: ${{ matrix.config.pathInBindleArchive }}

  #     - name: Install nomad
  #       uses: engineerd/configurator@v0.0.8
  #       with:
  #         name: ${{ matrix.config.nomadBinary }}
  #         url: ${{ matrix.config.nomadUrl }}
  #         pathInArchive: ${{ matrix.config.pathInNomadArchive }}

  #     - name: Install hippo
  #       run: |
  #         curl -L ${{ matrix.config.hippoUrl }} -o hippo-server.tar.gz
  #         mkdir hippo-server-output
  #         tar xz -C hippo-server-output -f hippo-server.tar.gz
  #         cp -r hippo-server-output/**/* ~/configurator/bin
  #         chmod +x ~/configurator/bin/Hippo.Web

  #     - name: Install cargo-tarpaulin binary crate
  #       uses: actions-rs/install@v0.1
  #       with:
  #         crate: cargo-tarpaulin
  #         version: latest
  #         use-tool-cache: true

  #     - name: Cargo Tarpaulin
  #       run: cargo tarpaulin --follow-exec --skip-clean -t 6000 --out xml --features openssl/vendored,default,e2e-tests
  #       env:
  #         RUST_LOG: spin=trace

  #     # Only attempt to upload to codecov.io if the repo owner is fermyon.
  #     # This allows forks to run CI on their own main branches as usual,
  #     # without needing to have a codecov token for uploading.
  #     - name: Upload to codecov.io
  #       uses: codecov/codecov-action@v3
  #       if: ${{ github.ref == 'refs/heads/main' && github.repository_owner == 'fermyon' }}
  #       with:
  #         fail_ci_if_error: true
  #         verbose: true

  #     - name: Archive code coverage results
  #       uses: actions/upload-artifact@v3
  #       if: ${{ github.ref == 'refs/heads/main' }}
  #       with:
  #         name: code-coverage-report
  #         path: cobertura.xml

  spin-login:
    uses: "fermyon/actions/.github/workflows/auth.yml@main"
    if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork) }}
    secrets:
      gh_username: ${{ secrets.E2E_GH_USERNAME }}
      gh_password: ${{ secrets.E2E_GH_PASSWORD }}
      gh_totp_secret: ${{ secrets.E2E_GH_TOTP_SECRET }}

  e2e-tests:
    runs-on: ${{ matrix.config.os }}
    if: always()
    needs: [spin-login]
    ##  we can't run e2e tests consecutively due to 5 apps limit on cloud and the fact that we use same account for deploying and testing
    concurrency:
      group: e2e-tests
    strategy:
      matrix:
        config:
          # - {
          #     os: "ubuntu-22.04",
          #     tinygo: "https://github.com/tinygo-org/tinygo/releases/download/v0.25.0/tinygo_0.25.0_amd64.deb",
          #     clang: "https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-14/wasi-sdk-14.0-linux.tar.gz",
          #     zig: "https://ziglang.org/download/0.10.0/zig-linux-x86_64-0.10.0.tar.xz",
          #     grain: "https://github.com/grain-lang/grain/releases/download/grain-v0.5.4/grain-linux-x64",
          #     zigpath: "zig-linux-x86_64-0.10.0"
          #   }
          - {
              os: "windows-latest",
              tinygo: "https://github.com/tinygo-org/tinygo/releases/download/v0.25.0/tinygo0.25.0.windows-amd64.zip",
              clang: "https://github.com/WebAssembly/wasi-sdk/releases/download/wasi-sdk-14/wasi-sdk-14.0-mingw.tar.gz",
              zig: "https://ziglang.org/download/0.10.0/zig-windows-x86_64-0.10.0.zip",
              grain: "https://github.com/grain-lang/grain/releases/download/grain-v0.5.13/grain-win-x64.exe",
              zigpath: "zig-windows-x86_64-0.10.0"
            }

    steps:
      - uses: actions/checkout@v3

      # - name: Retrieve saved Spin Binary
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: spin-ubuntu-latest
      #     path: target/release/

      # - name: Add Spin Binary to path
      #   run: |
      #     ls -lah target/
      #     ls -lah target/release
      #     chmod +x target/release/spin
      #     echo `pwd`/target/release >> $GITHUB_PATH
      
      # - name: Retrieve saved Fermyon cloud token
      #   if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork) }}
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: spin-fermyon-cloud-config.json
      #     path: C:\Users\runneradmin\AppData\Roaming\

      # - name: Install Go
      #   uses: actions/setup-go@v3
      #   with:
      #     go-version: "1.19"
      #     check-latest: true 

      - name: Install grain
        uses: rajatjindal/configurator@v0.0.4
        with:
          name: "grain"
          url: ${{ matrix.config.grain }}

      # - name: Install Tinygo
      #   run: |
      #     wget ${{ matrix.config.tinygo }}
      #     sudo dpkg -i tinygo_0.25.0_amd64.deb
      #     tinygo env

      # - name: Install zig
      #   run: |
      #     wget ${{ matrix.config.zig }}
      #     tar -xf ${{ matrix.config.zigpath }}.tar.xz
      #     echo `pwd`/${{ matrix.config.zigpath }} >> $GITHUB_PATH

      - name: Install latest Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          components: clippy, rustfmt

      - name: "Install Wasm Rust target"
        run: rustup target add wasm32-wasi

      - name: Setup gotestsum
        uses: autero1/action-gotestsum@v1.0.0
        with:
          gotestsum_version: "1.8.2"

      # - name: Versions
      #   run: |
      #     echo "GRAIN_VERSION=`grain --version`" >> $GITHUB_ENV
      #     echo "GO_VERSION=`go version | awk '{print $3}'`" >> $GITHUB_ENV 
      #     echo "TINYGO_VERSION=`tinygo version | awk '{print $3}'`" >> $GITHUB_ENV
      #     echo "RUST_VERSION=`rustc --version | awk '{print $2}'`" >> $GITHUB_ENV
      #     echo "ZIG_VERSION=`zig version`" >> $GITHUB_ENV 
      #     echo "SPIN_VERSION=`spin --version`" >> $GITHUB_ENV 

      # - name: "Test Spin Examples with Spin Up"
      #   working-directory: e2e-tests
      #   run: |
      #     set -o pipefail
      #     export RUST_LOG=spin=trace
      #     mkdir -p .results
      #     gotestsum \
      #       --jsonfile .results/spin-up.json \
      #       --format testname \
      #       -- ./... -run ^TestSpinTemplatesUsingSpinUp$

      # - name: "Test Spin Examples with Fermyon Cloud"
      #   if: ${{ github.event_name != 'pull_request' || (github.event_name == 'pull_request' && !github.event.pull_request.head.repo.fork) }}
      #   env: 
      #     E2E_GH_USERNAME: ${{ secrets.E2E_GH_USERNAME }}
      #     E2E_GH_PASSWORD: ${{ secrets.E2E_GH_PASSWORD }}
      #     E2E_GH_TOTP_SECRET: ${{ secrets.E2E_GH_TOTP_SECRET }}
      #   working-directory: e2e-tests
      #   run: |
      #     set -o pipefail
      #     export RUST_LOG=spin=trace
      #     mkdir -p .results
      #     gotestsum \
      #       --jsonfile .results/fermyon-cloud.json \
      #       --format testname \
      #       -- ./... -parallel 5 -run ^TestSpinTemplatesUsingCloud$

      # - name: Create html report for e2e tests
      #   uses: rajatjindal/gotest-to-html@v0.0.22
      #   if: always()
      #   with:
      #     title_secondary: e2e test report
      #     tags: "env=prod;branch=${{ github.ref }};os=ubuntu-latest;spin=${{ env.SPIN_VERSION }};golang=${{ env.GO_VERSION }};tinygo=${{ env.TINYGO_VERSION }};zig=${{ env.ZIG_VERSION }};grain=${{ env.GRAIN_VERSION }}"
      #     gotest_output_file: e2e-tests/.results/spin-up.json,e2e-tests/.results/fermyon-cloud.json
      #     archive: false
      #     run_id: ${{ github.run_id }}

      # - name: Upload screenshots
      #   uses: actions/upload-artifact@v3
      #   if: failure()
      #   with:
      #     name: screenshots
      #     path: e2e-tests/tests/screenshot.png

      # - name: Upload gotest output
      #   uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: gotest_output
      #     path: e2e-tests/.results/*.json

      # - name: Upload html output
      #   uses: actions/upload-artifact@v3
      #   if: always()
      #   with:
      #     name: html
      #     path: e2e-tests/.results/*-report.html
