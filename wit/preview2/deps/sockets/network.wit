
default interface network {
    /// An opaque resource that represents access to (a subset of) the network.
	/// This enables context-based security for networking.
	/// There is no need for this to map 1:1 to a physical network interface.
	/// 
	/// FYI, In the future this will be replaced by handle types.
    type network = u32

	/// Dispose of the specified `network`, after which it may no longer be used.
	/// 
	/// Note: this function is scheduled to be removed when Resources are natively supported in Wit.
	drop-network: func(this: network)



	enum error {
		unknown,
		again,
		// TODO ...
	}

	enum ip-address-family {
		/// Similar to `AF_INET` in POSIX.
		ipv4, 

		/// Similar to `AF_INET6` in POSIX.
		ipv6,
	}

	type ipv4-address = tuple<u8, u8, u8, u8>
	type ipv6-address = tuple<u16, u16, u16, u16, u16, u16, u16, u16>

	variant ip-address {
		ipv4(ipv4-address),
		ipv6(ipv6-address),
	}

	record ipv4-socket-address {
		port: u16, // sin_port
		address: ipv4-address, // sin_addr
	}

	record ipv6-socket-address {
		port: u16, // sin6_port
		flow-info: u32, // sin6_flowinfo
		address: ipv6-address, // sin6_addr
		scope-id: u32, // sin6_scope_id
	}

	variant ip-socket-address {
		ipv4(ipv4-socket-address),
		ipv6(ipv6-socket-address),
	}

}