# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Rust
on:
  push:
    branches: ["main", "v*"]
    # Also run on tag pushes, as the release.yml doesn't currently run tests
    tags: ["v*"]
  pull_request:
    branches: ["main", "v*"]
    paths-ignore:
      - "docs/**"
      - "README.md"
      - "tests/README.md"

# Serialize workflow runs per ref
# Cancel any outdated, in-flight runs for refs other than 'main'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

# env:
#   RUST_VERSION: 1.73

jobs:
  build-and-sign:
    name: build and sign release assets
    runs-on: ${{ matrix.config.os }}
    permissions:
      # cosign uses the GitHub OIDC token
      id-token: write
      # needed to upload artifacts to a GH release
      contents: write
    strategy:
      matrix:
        config:
          - {
              os: "windows-latest",
              # arch: "amd64",
              extension: ".exe",
              extraArgs: "",
              target: "",
              targetDir: "target/release",
            }
    steps:
      - uses: actions/checkout@v3

      # - name: set the release version (tag)
      #   if: startsWith(github.ref, 'refs/tags/v')
      #   shell: bash
      #   run: echo "RELEASE_VERSION=${GITHUB_REF/refs\/tags\//}" >> $GITHUB_ENV

      # - name: set the release version (main)
      #   if: github.ref == 'refs/heads/main'
      #   shell: bash
      #   run: echo "RELEASE_VERSION=canary" >> $GITHUB_ENV

      # - name: lowercase the runner OS name
      #   shell: bash
      #   run: |
      #     OS=$(echo "${{ runner.os }}" | tr '[:upper:]' '[:lower:]')
      #     echo "RUNNER_OS=$OS" >> $GITHUB_ENV

      # - name: Install Cosign for signing Spin binary
      #   uses: sigstore/cosign-installer@v3.0.1
      #   with:
      #     cosign-release: v2.0.0

      # - name: Install Rust toolchain
      #   shell: bash
      #   run: |
      #     rustup toolchain install ${{ env.RUST_VERSION }}
      #     rustup default ${{ env.RUST_VERSION }}

      # - name: Install target
      #   if: matrix.config.target != ''
      #   shell: bash
      #   run: rustup target add --toolchain ${{ env.RUST_VERSION }} ${{ matrix.config.target }}

      # - name: "Install Wasm Rust target"
      #   run: rustup target add wasm32-wasi --toolchain ${{ env.RUST_VERSION }} && rustup target add wasm32-unknown-unknown --toolchain ${{ env.RUST_VERSION }}

      - name: setup dependencies
        uses: ./.github/actions/spin-ci-dependencies
        with:
          rust: true
          rust-wasm: true
          rust-cache: true

      # - name: setup for cross-compiled linux aarch64 build
      #   if: matrix.config.target == 'aarch64-unknown-linux-gnu'
      #   run: |
      #     sudo apt update
      #     sudo apt install gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
      #     echo '[target.aarch64-unknown-linux-gnu]' >> ${HOME}/.cargo/config.toml
      #     echo 'linker = "aarch64-linux-gnu-gcc"' >> ${HOME}/.cargo/config.toml
      #     echo 'rustflags = ["-Ctarget-feature=+fp16"]' >> ${HOME}/.cargo/config.toml

      - run: echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        if: runner.os == 'Windows'
      - run: echo 'OPENSSL_DIR=C:\Program Files\OpenSSL-Win64' | Out-File -FilePath $env:GITHUB_ENV -Append
        if: runner.os == 'Windows'
      - run: vcpkg install openssl:x64-windows-static-md
        if: runner.os == 'Windows'

      - name: build release
        shell: bash
        run: cargo build --release ${{ matrix.config.extraArgs }}

      # - name: Sign the binary with GitHub OIDC token
      #   shell: bash
      #   run: |
      #     cosign sign-blob \
      #       --yes \
      #       --output-certificate crt.pem \
      #       --output-signature spin.sig \
      #       ${{ matrix.config.targetDir }}/spin${{ matrix.config.extension }}

      # - name: package release assets
      #   if: runner.os != 'Windows'
      #   shell: bash
      #   run: |
      #     mkdir _dist
      #     cp crt.pem spin.sig README.md LICENSE ${{ matrix.config.targetDir }}/spin${{ matrix.config.extension }} _dist/
      #     cd _dist
      #     tar czf \
      #       spin-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.tar.gz \
      #       crt.pem spin.sig README.md LICENSE spin${{ matrix.config.extension }}

      # - name: package release assets
      #   if: runner.os == 'Windows'
      #   shell: bash
      #   run: |
      #     mkdir _dist
      #     cp crt.pem spin.sig README.md LICENSE ${{ matrix.config.targetDir }}/spin${{ matrix.config.extension }} _dist/
      #     cd _dist
      #     7z a -tzip \
      #       spin-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.zip \
      #       crt.pem spin.sig README.md LICENSE spin${{ matrix.config.extension }}

      # - name: upload binary as GitHub artifact
      #   if: runner.os != 'Windows'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: spin
      #     path: _dist/spin-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.tar.gz

      # - name: upload binary as GitHub artifact
      #   if: runner.os == 'Windows'
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: spin
      #     path: _dist/spin-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.zip

      # - name: Configure AWS Credentials
      #   if: |
      #     runner.os == 'linux' &&
      #     matrix.config.arch == 'amd64' &&
      #     github.repository_owner == 'fermyon' &&
      #     github.ref == 'refs/heads/main'
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/${{ secrets.SPIN_RELEASE_ARTIFACTS_REPO }}
      #     role-session-name: spin-release-artifacts
      #     aws-region: ${{ secrets.AWS_REGION }}

      # - name: Copy Binary to S3 - ${{ env.RELEASE_VERSION }}
      #   if: |
      #     runner.os == 'linux' &&
      #     matrix.config.arch == 'amd64' &&
      #     github.repository_owner == 'fermyon' &&
      #     github.ref == 'refs/heads/main'
      #   run: |
      #     aws s3 cp _dist/spin-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.tar.gz s3://${{ secrets.SPIN_RELEASE_ARTIFACTS_REPO }}/spin-${{ env.RELEASE_VERSION }}-${{ env.RUNNER_OS }}-${{ matrix.config.arch }}.tar.gz --acl public-read
