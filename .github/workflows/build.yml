# yaml-language-server: $schema=https://json.schemastore.org/github-workflow.json

name: Rust
on:
  push:
    branches: [main]
    # Also run on tag pushes, as the release.yml doesn't currently run tests
    tags: ["v*"]
  pull_request:
    branches: [main]
    paths-ignore:
      - "docs/**"
      - "README.md"
env:
  CARGO_TERM_COLOR: always
jobs:
  build:
    name: Build Spin
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - {
              os: "ubuntu-latest",
              extension: "",
              # We have this enabled for releases, so we should test it.
              extraArgs: "--features openssl/vendored",
              bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-linux-amd64.tar.gz",
              bindleBinary: "bindle-server",
              pathInBindleArchive: "bindle-server",
              nomadUrl: "https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_linux_amd64.zip",
              nomadBinary: "nomad",
              pathInNomadArchive: "nomad",
              hippoUrl: "https://github.com/deislabs/hippo/releases/download/v0.19.0/hippo-server-linux-x64.tar.gz",
              wasmtimeUrl: "https://github.com/bytecodealliance/wasmtime/releases/download/v0.36.0/wasmtime-v0.36.0-x86_64-linux.tar.xz",
              wasmtimeBinary: "wasmtime",
              pathInWasmtimeArchive: "wasmtime-v0.36.0-x86_64-linux/wasmtime",
              platformAgnosticChecks: true,
            }
          - {
              os: "macos-latest",
              extension: "",
              extraArgs: "",
              bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-macos-amd64.tar.gz",
              bindleBinary: "bindle-server",
              pathInBindleArchive: "bindle-server",
              nomadUrl: "https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_darwin_amd64.zip",
              nomadBinary: "nomad",
              pathInNomadArchive: "nomad",
              hippoUrl: "https://github.com/deislabs/hippo/releases/download/v0.19.0/hippo-server-osx-x64.tar.gz",
            }
          - {
              os: "windows-latest",
              extension: ".exe",
              extraArgs: "",
              bindleUrl: "https://bindle.blob.core.windows.net/releases/bindle-v0.8.0-windows-amd64.tar.gz",
              bindleBinary: "bindle-server.exe",
              pathInBindleArchive: "bindle-server.exe",
              nomadUrl: "https://releases.hashicorp.com/nomad/1.3.1/nomad_1.3.1_windows_amd64.zip",
              nomadBinary: "nomad.exe",
              pathInNomadArchive: "nomad.exe",
              hippoUrl: "https://github.com/deislabs/hippo/releases/download/v0.19.0/hippo-server-win-x64.zip",
            }
    steps:
      - uses: actions/checkout@v2

      - name: Install latest Rust stable toolchain
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          default: true
          components: clippy, rustfmt

      - name: "Install Wasm Rust target"
        run: rustup target add wasm32-wasi

      - name: Install bindle
        uses: engineerd/configurator@v0.0.8
        with:
          name: ${{ matrix.config.bindleBinary }}
          url: ${{ matrix.config.bindleUrl }}
          pathInArchive: ${{ matrix.config.pathInBindleArchive }}

      - name: Install nomad
        uses: engineerd/configurator@v0.0.8
        with:
          name: ${{ matrix.config.nomadBinary }}
          url: ${{ matrix.config.nomadUrl }}
          pathInArchive: ${{ matrix.config.pathInNomadArchive }}

      - name: Install hippo
        if: ${{ fromJSON(matrix.config.os != 'windows-latest') }}
        run: |
          curl -L ${{ matrix.config.hippoUrl }} -o hippo-server.tar.gz
          mkdir hippo-server-output
          tar xz -C hippo-server-output -f hippo-server.tar.gz
          cp -r hippo-server-output/**/* ~/configurator/bin
          chmod +x ~/configurator/bin/Hippo.Web

      - name: Install hippo on Windows
        if: ${{ fromJSON(matrix.config.os == 'windows-latest') }}
        run: |
          (New-Object System.Net.WebClient).DownloadFile("${{ matrix.config.hippoUrl }}","hippo-server.zip");
          md hippo-server-output;
          Expand-Archive .\hippo-server.zip .\hippo-server-output;
          echo "$((Get-Item .\hippo-server-output).FullName)\win-x64";
          echo "$((Get-Item .\hippo-server-output).FullName)\win-x64" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append;

      - uses: Swatinem/rust-cache@v1

      - name: Cargo Format
        if: ${{ matrix.config.platformAgnosticChecks }}
        run:
          cargo fmt --all -- --check

      - name: Cargo Clippy
        if: ${{ matrix.config.platformAgnosticChecks }}
        run:
          cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Cargo Build
        run: cargo build --workspace --all-targets --all-features ${{ matrix.config.extraArgs }}

      - name: Cargo Test
        run: |
          make test-unit
          make test-e2e
        env:
          RUST_LOG: spin=trace

      - name: "Install Go"
        if: ${{ matrix.config.platformAgnosticChecks }}
        uses: actions/setup-go@v3
        with:
          go-version: '1.17'

      - name: "Install TinyGo"
        if: ${{ matrix.config.platformAgnosticChecks }}
        run: |
          wget https://github.com/tinygo-org/tinygo/releases/download/v0.22.0/tinygo_0.22.0_amd64.deb
          sudo dpkg -i tinygo_0.22.0_amd64.deb
          tinygo env

      - name: "Install Wasmtime"
        uses: engineerd/configurator@v0.0.8
        if: ${{ matrix.config.platformAgnosticChecks }}
        with:
          name: ${{ matrix.config.wasmtimeBinary }}
          url: ${{ matrix.config.wasmtimeUrl }}
          pathInArchive: ${{ matrix.config.pathInWasmtimeArchive }}

      - name: "Test Go SDK"
        if: ${{ matrix.config.platformAgnosticChecks }}
        run: make test-sdk-go

      - name: "Archive executable artifact"
        uses: actions/upload-artifact@v3
        with:
          name: spin-${{ matrix.config.os }}
          path: target/debug/spin${{ matrix.config.extension }}

  check-docs:
    name: Check Docs
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Install bart
        run: |
          curl -LOs https://github.com/fermyon/bartholomew/releases/download/v0.3.0/bart
          chmod +x bart
          mv bart /usr/local/bin

      - name: Check docs site content
        run: make check-content
