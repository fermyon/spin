name: Dependencies setup for spin integration tests
description: 'composite action'
inputs:
  rust:
    description: 'setup rust'
    required: false
    default: 'false'
    type: bool
  rust-version:
    description: 'Rust version to setup'
    default: '1.73'
    required: false
    type: string

  rust-wasm:
    description: 'setup rust wasm'
    required: false
    default: 'false'
    type: bool
  rust-cross:
    description: 'setup rust cross'
    required: false
    default: 'false'
    type: bool
  rust-cache:
    description: 'setup rust cache'
    required: false
    default: 'false'
    type: bool

  nomad:
    description: 'setup nomad'
    required: false
    default: 'false'
    type: bool
  nomad-version:
    description: 'Nomad version to setup'
    default: '1.3.1'
    required: false
    type: string

  golang:
    description: 'setup golang'
    required: false
    default: 'false'
    type: bool
  golang-version:
    description: 'golang version to setup'
    default: '1.20'
    required: false
    type: string

  wasmtime:
    description: 'setup wasmtime'
    required: false
    default: 'false'
    type: bool
  wasmtime-version:
    description: 'wasmtime version to setup'
    default: 'v0.36.0'
    required: false
    type: string

  tinygo:
    description: 'setup tinygo'
    required: false
    default: 'false'
    type: bool
  tinygo-version:
    description: 'tinygo version to setup'
    default: 'v0.27.0'
    required: false
    type: string

  docker: 
    description: 'setup docker'
    required: false
    default: 'false'
    type: bool

  vcpkg:
    description: 'setup vcpkg'
    required: false
    default: 'false'
    type: bool

runs:
  using: "composite"
  steps:
    - name: Install latest Rust stable toolchain
      shell: bash
      if: ${{ inputs.rust == 'true' }}
      run: |
        rustup toolchain install ${{ inputs.rust-version }} --component clippy --component rustfmt
        rustup default ${{ inputs.rust-version }}

    - name: "Install Wasm Rust target"
      run: rustup target add wasm32-wasi && rustup target add wasm32-unknown-unknown
      if: ${{ inputs.rust-wasm == 'true' }}
      shell: bash

    - name: "Install cross-rs"
      run: cargo install cross
      if: ${{ inputs.rust-cross == 'true' }}
      shell: bash

    - uses: Swatinem/rust-cache@v2
      if: ${{ inputs.rust-cache == 'true' }}
      with:
        shared-key: "${{ runner.os }}-full-${{ hashFiles('./Cargo.lock') }}"

    ## Install nomad
    - name: Install nomad
      uses: endocrimes/setup-nomad@0.1.3
      if: ${{ inputs.nomad == 'true' }}
      with:
        version: ${{ inputs.nomad-version }}

    ## Install wasmtime
    - name: Install wasmtime
      uses: rajatjindal/setup-actions/wasmtime@v0.0.1
      if: ${{ inputs.wasmtime == 'true' }}
      with:
        version: ${{ inputs.wasmtime-version }}

    - name: "Install Go"
      uses: actions/setup-go@v3
      if: ${{ inputs.golang == 'true' }}
      with:
        go-version: ${{ inputs.golang-version }}

    ## Install tinygo
    - name: "Install TinyGo"
      uses: rajatjindal/setup-actions/tinygo@v0.0.1
      if: ${{ inputs.tinygo == 'true' }}
      with:
        version: ${{ inputs.tinygo-version }}

    ## Install vcpgk
    - name: "Install vcpkg"
      run: |
        echo "VCPKG_ROOT=$env:VCPKG_INSTALLATION_ROOT" | Out-File -FilePath $env:GITHUB_ENV -Append
        vcpkg install openssl:x64-windows-static-md
      shell: pwsh
      if: ${{ inputs.vcpkg == 'true' }}
